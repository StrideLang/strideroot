constant _SerialBaudRate  { # Overriden by configuration
	value: 57600
}

constant _SerialPort  { # Overriden by configuration
	value: '"/dev/ttyACM0"'
}

#intListOverride SerialBaudRate {
#	name: "Baud Rate"
#	possibleValues: [9600, 14400, 19200, 38400, 56000, 57600, 115200, 128000]
#	default: 56000
#	override: [_SerialBaudRate]
#	meta: "Serial Baud Rate"
#}

resource SerialPort {
    name: "Serial"
    substitutions: [
        "baud_rate", _SerialBaudRate #,
        #"serial_port", _SerialPort,
        #"serial_process_rate", SerialProcessRate
    ]
    initializations: ["
    Serial.begin(%%baud_rate%%);"]
    includes: []
    declarations: []
    properties: [
        _SerialBaudRate
    ]
}

#platformModule _SerialPrintModule {
#	inputs: ["real","real"]
#	outputs: []
#    domain: none
##    include: []
##    linkTo: []
##    declarations: ['']
#    resource: _SerialPort
#    initializations: ["Serial.begin(9600); // init"]
#    processing: '
#	Serial.print(%%intokens:1%%);
#	Serial.print(":");
#	Serial.println(%%intokens:0%%);
#	'
#    inherits: [_Signal]
#}

constant SerialProcessRate {
	value: 1000
}
 
 
_domainDefinition SerialDomain {
	framework: _WiringFramework
	parentDomain: WiringDomain
	rate: SerialProcessRate
	requiresResources: [SerialPort]
    substitutions: [
        #"serial_port", _SerialPort,
		#"serial_process_rate", SerialProcessRate
    ]
    domainIncludes: []
    domainDeclarations: []
    domainInitializationCode: "
    //[[Initialization]]
//[[/Initialization]]"
    domainProcessingCode: '
    // Serial domain code
//[[Processing]]
//[[/Processing]]
// End Serial Domain
    '
	domainFunctionCode: '
    //[[Declarations]]
//[[/Declarations]]
    '
    domainCleanupCode: ''
}

_domainDefinition SerialOutDomain {
	framework: _WiringFramework
	parentDomain: SerialDomain
	rate: 0
  domainInitializationCode: '
  //[[Initialization]]
//[[/Initialization]]'
	domainFunctionCode: '
    //[[Declarations]]
//[[/Declarations]]
    '
	domainProcessingCode: '//Serial Out code
    //[[Processing]]
//[[/Processing]]
'
    domainCleanupCode: ''
}

_domainDefinition SerialInDomain {
	framework: _WiringFramework
	parentDomain: SerialDomain
	rate: 0
  domainInitializationCode: '
  //[[Initialization]]
//[[/Initialization]]
  '	
  domainFunctionCode: '
    //[[Declarations]]
//[[/Declarations]]
    '
  domainDeclarations: ['float __serialInVar[%%in_channels%%];',
  'size_t counter = 0;',
    'char buffer[8];']
  substitutions: ["in_channels", _NumSerialInChannels]
	domainFunctionCode: ''
	domainProcessingCode: "
    while (Serial.available() > 0) {
        buffer[counter] = Serial.read();
        if (buffer[counter] == '\n') {
            size_t parseCounter = 1;
            while(parseCounter < counter) {
                if (buffer[parseCounter] == ':') {
                    buffer[parseCounter] = '\0';
                    buffer[counter] = '\0';
                    String chanStr(buffer);
                    String valueStr(&buffer[parseCounter + 1]);

                    Serial.println(valueStr);
                    __serialInVar[chanStr.toInt()] = valueStr.toFloat();
                    
                }
                parseCounter++;
            }

            counter = 0;
//[[Processing]]
//[[/Processing]]
        } else {
            counter++;
        }
    }
    "
    domainCleanupCode: '// Cleanup SerialInDomain'
}


platformBlock _SerialOutput {
    typeName: '_serialOutput'
	inputs: ["real"]
	outputs: []
    domain: SerialOutDomain
#    include: []
#    linkTo: []
    declarations: ['byte channel = 0;']
    initializations: ["
    "
    ]
    processing: '
    channel = %%bundle_index%%;
    Serial.print(channel);
    Serial.print(":");
    Serial.println(%%intoken:0%%);
	'
	postProcessing: '// Post'
    inherits: [_Signal]
}

platformBlock _SerialInput {
    typeName: '_serialInput'
	outputs: ["real"]
    domain: SerialInDomain
#    include: []
#    linkTo: []
#    declarations: ['']
    initializations: [""]
    processing: "__serialInVar[%%bundle_index%%]"
    inherits: [_Signal]
}

constant _NumSerialInChannels {value: 2}

_serialInput SerialIn[_NumSerialInChannels] {
    rate: SerialProcessRate
    domain: SerialInDomain
}

constant _NumSerialOutChannels {value: 2}

_serialOutput SerialOut[_NumSerialOutChannels] {
    rate: SerialProcessRate
    domain: SerialOutDomain
}
