module TableOscillator {
    ports: [
		mainOutputPort OutputPort {
			block: Output
		}
		propertyInputPort FrequencyPort {
			name: "frequency"
			block: Frequency
			default: 440.0
			meta: "The frequency of the oscillator."
		},
		propertyInputPort AmplitudeProperty {
			name: "amplitude"
			block: Amplitude
			default: 1.0
			meta: "The amplitude of the oscillator."
		},
#		property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
		propertyInputPort StartPhaseProperty {
			name: "phase"
			block: StartPhase
			meta: "The starting phase of the oscillator."
		},
		propertyInputPort ResetPort {
			name: "reset"
			block: Reset
			meta: "Resets the oscillator to the starting phase."
		}
    ]
    blocks: [
        signal Amplitude {
            default :       1.0
        }
        constant TableSize {
            value: 1024
        }

        table SineTable {
            size: TableSize
            rate: TableSize
            domain: OutputPort.domain
        }
        
        signal Phase {
            default :       0.0
            reset: Reset
            domain: OutputPort.domain
        }
        
        signal PhaseInc {
            default :       0.0
            domain: FrequencyPort.domain
        }
        switch PhaseOverflow {
            domain: OutputPort.domain
        }
        reaction WrapPhase {
            streams: [
                Phase - TableSize >> Phase;
            ]
        }
    ]
    streams: [
        Oscillator(frequency: 1.0) >> SineTable; 
        Frequency * TableSize  / OutputPort.rate >> PhaseInc;
        
        SineTable[Phase] >> Level(gain: Amplitude) >> Output;
        Phase + PhaseInc >> Phase;
        [Phase , TableSize ] >> Greater() >> PhaseOverflow >> WrapPhase();
    ]
    meta: "Table read oscillator"
}
