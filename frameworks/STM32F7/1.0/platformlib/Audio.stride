

constant AudioRate {
    value: 48000 # This will be overwritten by the configuration file
}


_domainDefinition AudioDomain {
	framework: _STM32F7_Framework
    parentDomain: RootDomain
	rate: AudioRate
    #substitutions: ["domain_rate", AsyncDomain.rate ]
    domainIncludes: []
    domainDeclarations: [
"/* Private variables ---------------------------------------------------------*/
#define SI5351C_ADDRESS_W				0xC0
#define SI5351C_ADDRESS_R				0xC1

#define AK4558_ADDRESS_W				0x20
#define AK4558_ADDRESS_R				0x21

#define SI5351C_NUM_REGS                75
#define AK4558_NUM_REGS					5

#define AUDIO_BUFFER_SIZE				4
#define UART_BUFFER_SIZE				10
#define DFSDM_BUFFER_SIZE				32

typedef struct
{
    unsigned char address;	/* 8-bit register address */
    unsigned char value;		/* 8-bit register data */

} si5351c_register_t;

si5351c_register_t const si5351c_revb_registers[SI5351C_NUM_REGS] =
{

    { 0x03, 0xFF },       // Disable Outputs
    { 0x10, 0x80 },       // Power Down Output 0
    { 0x11, 0x80 },       // Power Down Output 1
    { 0x12, 0x80 },       // Power Down Output 2
    { 0x13, 0x80 },       // Power Down Output 3
    { 0x14, 0x80 },       // Power Down Output 4
    { 0x15, 0x80 },       // Power Down Output 5
    { 0x16, 0x80 },       // Power Down Output 6
    { 0x17, 0x80 },		// Power Down Output 7
    { 0x02, 0x40 },		// Do Not Mask: SYS_INIT, LOL_A (Loss of Lock), LOS (Loss of Signal CLKIN)
    { 0x0F, 0x04 },       // Select CLKIN as PLLA reference
    { 0x10, 0x0F },
    { 0x11, 0x0F },
    { 0x12, 0x0F },
    { 0x13, 0x0F },
    { 0x14, 0x8C },
    { 0x15, 0x8C },
    { 0x16, 0x8C },
    { 0x17, 0x8C },
    { 0x1A, 0x0C },
    { 0x1B, 0x35 },
    { 0x1C, 0x00 },
    { 0x1D, 0x0F },
    { 0x1E, 0xF0 },
    { 0x1F, 0x00 },
    { 0x20, 0x09 },
    { 0x21, 0x50 },
    { 0x2A, 0x0C },
    { 0x2B, 0x35 },
    { 0x2C, 0x00 },
    { 0x2D, 0x0F },
    { 0x2E, 0xF0 },
    { 0x2F, 0x00 },
    { 0x30, 0x09 },
    { 0x31, 0x50 },
    { 0x32, 0x00 },
    { 0x33, 0x7D },
    { 0x34, 0x00 },
    { 0x35, 0x10 },
    { 0x36, 0xB0 },
    { 0x37, 0x00 },
    { 0x38, 0x00 },
    { 0x39, 0x10 },
    { 0x3A, 0x00 },
    { 0x3B, 0x04 },
    { 0x3C, 0x00 },
    { 0x3D, 0x07 },
    { 0x3E, 0x20 },
    { 0x3F, 0x00 },
    { 0x40, 0x00 },
    { 0x41, 0x00 },
    { 0x42, 0x00 },
    { 0x43, 0x02 },
    { 0x44, 0x00 },
    { 0x45, 0x10 },
    { 0x46, 0x40 },
    { 0x47, 0x00 },
    { 0x48, 0x00 },
    { 0x49, 0x00 },
    { 0x5A, 0x00 },
    { 0x5B, 0x00 },
    { 0x95, 0x00 },
    { 0x96, 0x00 },
    { 0x97, 0x00 },
    { 0x98, 0x00 },
    { 0x99, 0x00 },
    { 0x9A, 0x00 },
    { 0x9B, 0x00 },
    { 0xA2, 0x00 },
    { 0xA3, 0x00 },
    { 0xA4, 0x00 },
    { 0xB7, 0x12 },
    { 0x75, 0xAC },
    { 0x03, 0xF0 },		// Enable Outputs
    { 0x09, 0xF0 }		// NOEB Pin Control Enable

};

typedef struct
{
    unsigned char address;	/* 8-bit register address */
    unsigned char value;	/* 8-bit register data */
} ak4558_register_t;

ak4558_register_t const ak4558_registers[AK4558_NUM_REGS] =
{
    { 0x03, 0x18 },		// DACs Enables / ADCs Disabled
    { 0x04, 0x00 },		// Not Required
    { 0x08, 0xD7 },		// -12.0 dB with HP Amp
    { 0x09, 0xD7 },		// -12.0 dB with HP Amp
    { 0x00, 0x07 }
};

// These need to be replaced with read > modify > write
ak4558_register_t const ak4558_soft_mute_enable = {0x03, 0x19};
ak4558_register_t const ak4558_soft_mute_disable = {0x03, 0x18};

uint8_t LED = 0;
q15_t I2S_TX_Buffer[AUDIO_BUFFER_SIZE] = {0};
q15_t *I2S_TX_Buffer_p = (q15_t *) I2S_TX_Buffer;


uint8_t state = 0;
uint8_t channel = 0;
uint8_t UART_RX_Buffer[UART_BUFFER_SIZE] = {0};

int32_t DFSDM_Buffer_TopLeft[DFSDM_BUFFER_SIZE] = {0};
int32_t DFSDM_Buffer_TopRight[DFSDM_BUFFER_SIZE] = {0};
int32_t DFSDM_Buffer_BottomLeft[DFSDM_BUFFER_SIZE] = {0};
int32_t DFSDM_Buffer_BottomRight[DFSDM_BUFFER_SIZE] = {0};

q15_t MEMS_TopLeft = 0;			// M4
q15_t MEMS_TopRight = 0;			// M3
q15_t MEMS_BottomLeft = 0;		// M1
q15_t MEMS_BottomRight = 0;		// M2
"



    ]
    domainInitializationCode: "
  HAL_StatusTypeDef status_i2c;

  for (uint16_t i = 0; i < SI5351C_NUM_REGS; i++)
  {
    status_i2c = HAL_I2C_Master_Transmit(&hi2c1, SI5351C_ADDRESS_W, (uint8_t *) &si5351c_revb_registers[i], 2, 25);
    if (status_i2c == HAL_ERROR)
    {
      while(1)
	  {
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		HAL_Delay(50);
	  }
    }
  }

  // Enable Clock Output (Active Low)
  HAL_GPIO_WritePin(CLK_NOEB_GPIO_Port, CLK_NOEB_Pin, GPIO_PIN_RESET);
  HAL_Delay(25);

  // Enable Audio Codec (Active High)
  HAL_GPIO_WritePin(AK4558_PDN_GPIO_Port, AK4558_PDN_Pin, GPIO_PIN_SET);
  HAL_Delay(25);

  for (uint16_t i = 0; i < AK4558_NUM_REGS; i++)
  {
    status_i2c = HAL_I2C_Master_Transmit(&hi2c1, AK4558_ADDRESS_W, (uint8_t *) &ak4558_registers[i], 2, 25);
    if (status_i2c == HAL_ERROR)
    {
      while(1)
	  {
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		HAL_Delay(50);
	  }
    }
  }

  // Enable Soft Mute
  status_i2c = HAL_I2C_Master_Transmit(&hi2c1, AK4558_ADDRESS_W, (uint8_t *) &ak4558_soft_mute_enable, 2, 25);
  if (status_i2c == HAL_ERROR)
  {
	  while(1)
	  {
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		HAL_Delay(50);
	  }
  }

  // Start DFSDM DMA (MEMS Microphones)
  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter3, DFSDM_Buffer_TopLeft, DFSDM_BUFFER_SIZE) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, DFSDM_Buffer_TopRight, DFSDM_BUFFER_SIZE) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, DFSDM_Buffer_BottomRight, DFSDM_BUFFER_SIZE) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, DFSDM_Buffer_BottomLeft, DFSDM_BUFFER_SIZE) != HAL_OK)
  {
    Error_Handler();
  }

  // Start Audio DMA
  if (HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *) I2S_TX_Buffer, AUDIO_BUFFER_SIZE) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_Delay(50);

  // Enable HP Amp
  HAL_GPIO_WritePin(TPA4411_PDN_GPIO_Port, TPA4411_PDN_Pin, GPIO_PIN_SET);
  // Enable Speakers
  HAL_GPIO_WritePin(TPA2012_PDN_GPIO_Port, TPA2012_PDN_Pin, GPIO_PIN_RESET);
  HAL_Delay(25);

  // Disable Soft Mute
  status_i2c = HAL_I2C_Master_Transmit(&hi2c1, AK4558_ADDRESS_W, (uint8_t *) &ak4558_soft_mute_disable, 2, 25);
  if (status_i2c == HAL_ERROR)
  {
	  while(1)
	  {
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		HAL_Delay(50);
	  }
  }

  if (HAL_UART_Receive_DMA(&huart5, (uint8_t *) UART_RX_Buffer, UART_BUFFER_SIZE) != HAL_OK)
  {
      Error_Handler();
  }

  if (HAL_TIM_Base_Start_IT(&htim3) !=HAL_OK)
  {
      Error_Handler();
  }


//[[Initialization]]
//[[/Initialization]]
    "
	domainFunctionCode: "// Main Domain Function

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
	for (uint8_t i = 0; i < (AUDIO_BUFFER_SIZE / 4); i++)
	{
//[[Processing]]
//[[/Processing]]
	}
}
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	HAL_I2S_TxHalfCpltCallback(hi2s);
}
	"
    domainCleanupCode: '// audio domain cleanup
//[[Cleanup]]
//[[/Cleanup]]
	'
}



# Audio ---------------
platformBlock _HwInput {
    typeName: '_hwInput'
#	numInputs: 0
	outputs: ["real", "real"]
    domain: AudioDomain
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "io.in(%%bundle_index%%)"
    inherits: ['signal']
}

platformBlock _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real", "real"]
    domain: AudioDomain
#	numOutputs: 0
    include: ["arm_math.h"]
#    linkTo: []
    declarations: ['static q15_t Sample_q15[2];']
#    initializations: ["// %%token%% = 0;"]
    processing: "
		arm_float_to_q15(&%%intoken:0%%,&Sample_q15[%%bundle_index%%],1);
	"
	postProcessingOnce: "
    *I2S_TX_Buffer_p++ = Sample_q15[0];
    *I2S_TX_Buffer_p++ = Sample_q15[1];

    if (I2S_TX_Buffer_p == I2S_TX_Buffer + AUDIO_BUFFER_SIZE) 	// REQUIRED FOR BUFFER
    I2S_TX_Buffer_p = (q15_t *) I2S_TX_Buffer;
	"
    inherits: [_Signal]
}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: AudioDomain
}

_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: AudioDomain
}
