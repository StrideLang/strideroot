_frameworkDescription _DesktopTemplateFramework {
    frameworkName: "DesktopTemplate"
    defaultDataType: _RealType
}

alias PlatformDomain {
    block: AudioDomain
}

alias PlatformRate {
    block: AudioRate
}

_domainDefinition RootDomain {
	framework: _DesktopTemplateFramework
	rate: -1 # -1 is 'one-shot/final' domain
    substitutions: [ ]
    domainIncludes: ["<iostream>"]
	domainDeclarations: "
	
	namespace stride {

	bool init();
	bool cleanup();
	}"
	domainFunctionCode: '
// RtAudio RootDomain template
//[[Includes]]
//[[/Includes]]
namespace stride {
//[[Declarations]]
//[[/Declarations]]

//[[Instances]]
//[[/Instances]]
bool init() {
//[[Initialization]]
//[[/Initialization]]

//[[Cleanup]]
//[[/Cleanup]]
    return true;
}
}
'
}

constant AsyncRate {
	value: 1000
}

_domainDefinition AsyncDomain {
	framework: _DesktopTemplateFramework
	parentDomain: RootDomain
	rate: AsyncRate
    substitutions: ["domain_rate", AsyncDomain.rate ]
    domainIncludes: ['<thread>', '<chrono>', '<iostream>']
    domainDeclarations: ["void thread_func();",
		"std::thread asyncthread(thread_func);",
		"bool asyncthread_running {true};"]
    domainInitializationCode: "
	//[[Initialization]]
//[[/Initialization]]
	"
	domainProcessingCode: "// Async processing
	"
	domainFunctionCode: "
	void thread_func() {
		const int duration_ns = 1.0e9/%%domain_rate%%;
		while (asyncthread_running) {
			std::chrono::time_point<std::chrono::system_clock> start_time = std::chrono::system_clock::now();
//[[Processing]]
//[[/Processing]]
			// TODO add overrun check
	auto end_time = start_time + std::chrono::nanoseconds(duration_ns);
    std::this_thread::sleep_until(end_time);

			}
}
	"
    domainCleanupCode: '
//[[Cleanup]]
//[[/Cleanup]]
	asyncthread_running = false;
	asyncthread.join();
	std::cout << "Thread joined." << std::endl;
	'
}

