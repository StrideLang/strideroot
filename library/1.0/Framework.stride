
type _DomainDefinition {
	typeName: "_domainDefinition"
	properties: [
        typeProperty Substitutions {
			name: "substitutions"
			types: [""] # Allow list
			default: []
			required: off
		},
		typeProperty Framework {
			name: "framework"
			types: [_StringLiteral, ""]
			default: none
			required: on
		},
		typeProperty ParentDomain {
			name: "parentDomain"
			types: [""]
			default: none
			required: off
			meta: "The domain's parent domain."
		},
		typeProperty MaxInstances {
			name: "maxInstances"
			types: [""]
			default: none
			required: off
			meta: "The maximum number of instances of this domain that can be created. Setting to none means no limit"
		},
		typeProperty DomainRate {
			name: "rate"
			types: [_RealLiteral, _IntLiteral, ""]
			default: none
			required: on
			meta: "The domain's rate. A value of none indicates an asynchronous or immediate domain."
		},
		typeProperty RequiresResources {
			name: "requiresResources"
			types: [""]
			default: []
			required: off
			meta: "A list of resources required by the domain"
		},
		typeProperty ProvidesResources {
			name: "providesResources"
			types: [_DomainResourceType]
			default: []
			required: off
			meta: "A list of resources provided by the domain"
		},
#		typeProperty GlobalsTag {
#			name: "globalsTag"
#			types: [_StringLiteral]
#			default: "Includes"
#			required: off
#		},
#		typeProperty DeclarationsTag {
#			name: "declarationsTag"
#			types: [_StringLiteral]
#			default: ""
#			required: off
#		},
#		typeProperty ProcessingTag {
#			name: "processingTag"
#			types: [_StringLiteral]
#			default: ""
#			required: off
#		},
#		typeProperty InitializationTag {
#			name: "initializationTag"
#			types: [_StringLiteral]
#			default: ""
#			required: off
#		},
#		typeProperty CleanupTag {
#			name: "cleanupTag"
#			types: [_StringLiteral]
#			default: ""
#			required: off
#		},
		typeProperty DomainIncludes {
			name: "domainIncludes"
			types: [""] # Should take a list
			default: ""
			required: off
		},
		typeProperty DomainDeclarations {
			name: "domainDeclarations"
			types: [""]
			default: ""
			required: off
		},
		typeProperty DomainDeclarationsCode {
			name: "domainDeclarationsCode"
			types: [_StringLiteral]
			default: ""
			required: off
		},

		typeProperty DomainInstancesCode {
			name: "domainInstancesCode"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty DomainInitializationCode {
			name: "domainInitializationCode"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty DomainFunctionCode {
			name: "domainFunctionCode"
			types: [_StringLiteral]
			default: ""
			required: off
			meta: 'Declaration of the domain processing function. Use //[[Processing]]//[[/Processing]] to mark where the generated code needs to be placed within 
			the domain function'
		},
		typeProperty DomainProcessingCode {
			name: "domainProcessingCode"
			types: [_StringLiteral]
			default: ""
			required: off
			meta: 'Processing code for domain. Code to be called
			by a parent domain to update or tick the domain.'
		},
		typeProperty DomainCleanupCode {
			name: "domainCleanupCode"
			types: [_StringLiteral]
			default: ""
			required: off
		}
	]
#	inherits: [_Base]
}

type _PlatformModulePortType {
	typeName: "_platformModulePort"
	properties: [
		typeProperty Name {
			name: "name"
			types: [""]
			default: none
			required: on
		}
		typeProperty Default {
			name: "default"
			types: [""]
			default: none
			required: on
		}
	]

}

type _PlatformCodeType {
	typeName: "_platformCode"
	properties: [
		typeProperty Include {
			name: "include"
			types: [""] #TODO accepts list
			default: []
			required: off
		},
		typeProperty IncludeDir {
			name: "includeDir"
			types: [""] #TODO accepts list
			default: []
			required: off
		},
		typeProperty LinkTo {
			name: "linkTo"
			types: [""] #TODO accepts list
			default: []
			required: off
		},
		typeProperty LinkDir {
			name: "linkDir"
			types: [""] #TODO accepts list
			default: []
			required: off
		},
		typeProperty Resources {
			name: "resources"
			types: [""]
			default: []
			required: off
			meta: "List of resources required by this object"
		},
		typeProperty GlobalDeclarations {
			name: "globalDeclarations"
			types: [""] #TODO validate list
			default: []
			required: off
		},
		typeProperty GlobalInitializations {
			name: "globalInitializations"
			types: [""] #TODO validate list
			default: []
			required: off
		},
		typeProperty Declarations {
			name: "declarations"
			types: [""] #TODO validate list
			default: []
			required: on
		},
		typeProperty Constructors {
			name: "constructors"
			types: [""] #TODO validate list
			default: []
			required: off
		},
		typeProperty Initializations {
			name: "initializations"
			types: [""] #TODO validate list
			default: []
			required: on
		},
		typeProperty PreProcessingOnce {
			name: "preProcessingOnce"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty PreProcessing {
			name: "preProcessing"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty Processing {
			name: "processing"
			types: [_StringLiteral]
			default: none
			required: on
		},
		typeProperty PostProcessing {
			name: "postProcessing"
			types: [_StringLiteral]
			default: ""
			required: on
		},
		typeProperty PostProcessingOnce {
			name: "postProcessingOnce"
			types: [_StringLiteral]
			default: ""
			required: on
		},
		typeProperty Cleanup {
			name: "cleanup"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty Domain {
			name: "domain"
			types: [""] #
			default: none
			required: off
		},
		typeProperty AllowedDomains {
			name: "allowedDomains"
			types: [""] #
			default: none
			required: off
		}
	]
}

type _PlatformModuleType {
	typeName: "platformModule"
	properties: [
		typeProperty Inputs {
			name: "inputs"
			types: [""] #TODO accepts list
			default: []
			required: off
		},
		typeProperty Outputs {
			name: "outputs"
			types: [""]
			default: []
			required: off
		},
		typeProperty Ports {
			name: "ports"
			types: [""]
			default: []
			required: off
		},
		typeProperty Properties {
			name: "propertiesConstraints"
			types: [""]
			default: []
			required: off
			meta: "This will validate constraints for property input"
		}
	]
	inherits: [_PlatformCodeType]
}

type _PlatformBlockType {
	typeName: "platformBlock"
	properties: [ 
		typeProperty TypeName {
			name: "typeName"
			types: [_StringLiteral]
			default: none
			required: on
		},
        typeProperty Rate {
			name: "rate"
			types: [""] #
			default: -1
			required: off
		}
	]
	inherits: [_PlatformModuleType]
}


type _PlatformType {
	typeName: "platform"
	properties: [
		typeProperty Framework {
			name: "framework"
			types: [_StringLiteral]
			default: none
			required: on
		},
		typeProperty FrameworkVersion {
			name: "frameworkVersion"
			types: [_StringLiteral]
			default: none
			required: off
		},
		typeProperty Hardware {
			name: "hardware"
			types: [_StringLiteral]
			default: none
			required: off
		},
		typeProperty HardwareVersion {
			name: "hardwareVersion"
			types: [_StringLiteral]
			default: none
			required: off
		},
		typeProperty RootNamespace {
			name: "rootNamespace"
			types: [_StringLiteral]
			default: ""
			required: off
		},
		typeProperty Required {
			name: "required"
			types: [_SwitchLiteral]
			default: none
			required: on
		}
	]
}

type _FrameworkDescriptionType {
	typeName: "_frameworkDescription"
	properties: [
		typeProperty FrameworkName {
			name: "frameworkName"
			types: [_StringLiteral]
			default: none
			required: on
		},
		typeProperty DefaultDataType {
			name: "defaultDataType"
			types: [""]
			default: _RealType
			required: off
		},
		typeProperty Inherits {
			name: "inherits"
			types: [_StringLiteral, ""]
			default: none
			required: off
		},
		typeProperty InheritsVersion {
			name: "inheritsVersion"
			types: [_StringLiteral, ""]
			default: none
			required: off
		}
	]
	inherits: [_Base]
}

type _ConnectionType {
	typeName: "connection"
	properties: [
		typeProperty SourceFramework {
			name: "sourceFramework"
			types: [""]
			default: none
			required: on
		},
		typeProperty SourceDomains {
			name: "sourceDomains"
			types: [""]
			default: none
			required: on
		},
		typeProperty DestinationFramework {
			name: "destinationFramework"
			types: [""]
			default: none
			required: on
		},
		typeProperty DestinationDomains {
			name: "destinationDomains"
			types: [""]
			default: none
			required: on
		},
		typeProperty SourceImports {
			name: "sourceImports"
			types: [""]
			default: none
			required: off
		},
		typeProperty SourceStreams {
			name: "sourceStreams"
			types: [""]
			default: none
			required: on
		},
		typeProperty DestinationImports {
			name: "destinationImports"
			types: [""]
			default: none
			required: off
		},
		typeProperty DestinationStreams {
			name: "destinationStreams"
			types: [""]
			default: none
			required: on
		}
	]
}

type _SystemType {
	typeName: "system"
	properties: [
		typeProperty Platforms {
			name: "platforms"
			types: [_PlatformSpec]
			required: on
		},
        typeProperty Connections {
			name: "connections"
			types: [_ConnectionType]
			default: none
			required: off
		}
	]
}

type _PlatformOperatorType {
	typeName: "platformOperator"

	properties: [
		typeProperty LeftDataTypesProperty {
			name: "leftDataTypes"
			types: [""]
			default: []
			required: on
			meta: "Allowed data types for left element"
		}
		typeProperty LeftDataTypesProperty {
			name: "rightDataTypes"
			types: [""]
			default: none
			required: off
			meta: "Allowed data types for right element. Leave as none if unary operator"
		}
		typeProperty OutDataTypesProperty {
			name: "outDataTypes"
			types: [""]
			default: []
			required: on
			meta: "Resulting data type from operation"
		}


	]
	inherits: [_PlatformCodeType]
}
