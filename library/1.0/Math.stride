#
# Authors:
# Andres Cabrera mantaraya36@gmail.com
# Keehong Youn younkeehong@gmail.com


constant _Pi {
    value: 3.14159265358979323846264338327950288419716939937510
}

module Abs {
	ports: [
		mainOutputPort OutputPort {
			block: Output
			meta : "Absolute value" 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Input value"
		}
	]
	blocks: [
	]
	streams: [
		Input >> __Abs() >> Output;
	]
	meta: "Absolute function"
}

module Cos {
	ports: [ # A property could be the type of input, (degrees, radians, etc.)
		mainOutputPort OutputPort {
			block: Output
			meta : "The cosine of the angle." 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Input angle in radians"
		}
	]
	blocks: [
	]
	streams: [
		Input >> __Cos() >> Output;
	]
	meta: "Cosine function"
}



module Sin {
	ports: [ # A property could be the type of input, (degrees, radians, etc.)
		mainOutputPort OutputPort {
			block: Output
			meta : "The sine of the angle." 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Input angle in radians"
		}
	]
	blocks: [
	]
	streams: [
		Input >> __Sin() >> Output;
	]
	meta: "Sine function"
}


module Tan {
	ports: [ # A property could be the type of input, (degrees, radians, etc.)
		mainOutputPort OutputPort {
			block: Output
			meta : "The tangent of the angle." 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Input angle in radians"
		}
	]
	blocks: [
	]
	streams: [
		Input >> __Tan() >> Output;
	]
	meta: "Tangent function"
}

module Divide {
	ports: [
		mainOutputPort OutputPort {
			block: Output
			meta : "The result of the division" 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Input values" 
		}
	]
	blocks: [
		signal Input[2] { 
			meta: "Input values"
		},
		signal Output {
			meta : "The result of the division"
		}
	]
	streams: [
		Input[1]/Input[2] >> Output;
	]
	meta: "Divide input values"
}

module Multiply {	
	ports: [
		mainOutputPort OutputPort {
			block: Output
			meta : "The result of the multiplication" 
		},
		mainInputPort InputPort {
			block: Input
			meta: "Values to multiply"
		}
	]
	blocks: [
		signal Input[2] { 
			meta: "Values to multiply"
		},
		signal Output {
			meta : "The result of the multiplication" 
		}
	]
	streams: [
		Input[1]*Input[2] >> Output;
	]
	meta: "Multiply input values."
}

module Inverse {
	input: Input
	output: Output
	blocks: [
		signal Input { meta: "Value to invert" },
		signal Output { meta: "The inverted value." }
	]
	streams: [
		-Input >> Output;
	]
	meta: "Invert (change the sign) of a value."
}

module Pow {	
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
			meta: "Values to power: Input[1]^Input[2]"
		}
	]
	blocks: [
		signal Input[2] { 
			domain: OutputPort.domain
		}
	]
	streams: [
		[Input[1], Input[2]] >> __Pow() >> Output;
	]
	meta: "power(Input[1], Input[2])"
}

module Exp {	
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
		}
	]
	blocks: [
	]
	streams: [
		Input >> __Exp() >> Output;
	]
	meta: "exp(Input)"
}

module Max {
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
		}
	]
	blocks: [
		signal Input[2] {
			domain: OutputPort.domain
			
		}
	]
	streams: [
		[Input[1], Input[2]] >> Greater() >> Select(whenOn: Input[1] whenOff: Input[2]) >> Output;
	]
}

module Min {
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
		}
	]
	blocks: [
		signal Input[2] {
			domain: OutputPort.domain
			
		}
	]
	streams: [
		[Input[1], Input[2]] >> Greater() >> Select(whenOn: Input[2] whenOff: Input[1]) >> Output;
	]
}

module Clamp {
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
		}
		propertyInputPort MinValPort {
			name: "min"
			block: MinVal
		}
		propertyInputPort MaxValPort {
			name: "max"
			block: MaxVal
		}
	]
	streams: [
		# One-liner would be:
		# [[Input, MinVal] >> Max(), MaxVal] >> Min() >> Output;
		[Input, MinVal] >> Max() >> T;
		[T, MaxVal] >> Min() >> Output;
	]
}

module Floor {	
	ports: [
		mainOutputPort OutputPort {
			block: Output
		},
		mainInputPort InputPort {
			block: Input
			domain: OutputPort.domain
			meta: "Floating point number input"
		}
	]
	blocks: [
		signal Input { 
			domain: OutputPort.domain
		}
	]
	streams: [
		Input >> __Floor() >> Output;
	]
	meta: "Returns float input value truncated to lower integer."
}
