
constant AudioRate {
    value: 44100 # TODO this needs to be set from the hardware configuration file
}


constant _AudioBlockSize {
    value: 44100 # TODO this needs to be set from the hardware configuration file
}

constant AudioBlockRate {
    value: AudioRate/_AudioBlockSize
}

_domainDefinition RootDomain {
	framework: _DesktopTemplateFramework
	rate: -1 # -1 is 'one-shot/final' domain
    substitutions: [ ]
    parentDomain: none
    domainIncludes: ["ReadWriteClasses.hpp",
	"Synchronization.hpp",
	"Helper.hpp"]
	domainFunctionCode: '
//[[Includes]]
//[[/Includes]]

//[[Declarations]]
//[[/Declarations]]

//[[Instances]]
//[[/Instances]]

void initialization() {
//[[Initialization]]
//[[/Initialization]]
}

int main() {

    initialization();

//[[Processing]]
//[[/Processing]]

//[[Cleanup]]
//[[/Cleanup]]
    return 0;
}
'
  domainCleanupCode: ''
}

_domainDefinition AudioBlockDomain {
	framework: _DesktopTemplateFramework
    parentDomain: RootDomain # This will be the root domain
	rate: AudioBlockRate
    substitutions: [
      "num_in_chnls", _NumInputChannels,
      "num_out_chnls", _NumOutputChannels,
      "audio_buffer_size", _AudioBlockSize
    ]
    domainIncludes: ["<iostream>", "<iomanip>"]
    domainDeclarations: ['constexpr int NUM_IN_CHANNELS = %%num_in_chnls%%;',
    'constexpr int NUM_OUT_CHANNELS = %%num_out_chnls%%;',
    'constexpr int NUM_SAMPLES = 44100;',
    'float inbuf[NUM_SAMPLES * NUM_IN_CHANNELS];',
    'float outbuf[NUM_SAMPLES * NUM_OUT_CHANNELS];'
]
    domainInitializationCode: '
    for(int i = 0; i < NUM_SAMPLES; i++) {
        inbuf[i* NUM_IN_CHANNELS] = (i * 2.0 / (NUM_SAMPLES-1)) - 1; // -1 -> 1
        inbuf[i* NUM_IN_CHANNELS + 1] = 1 - (i * 2.0 / (NUM_SAMPLES-1)); // 1 -> -1
    }
//[[Initialization]]
//[[/Initialization]]
    '
	domainProcessingCode: '
    audio_buffer_process();
    '
	domainFunctionCode: '
//[[Includes]]
//[[/Includes]]

//[[Declarations]]
//[[/Declarations]]

//[[Instances]]
//[[/Instances]]
	void audio_buffer_process()
{
//[[Processing]]
//[[/Processing]]
}
'
    domainCleanupCode: '
//[[Cleanup]]
//[[/Cleanup]]
    for(int i = 0; i < NUM_SAMPLES * NUM_IN_CHANNELS; i++) {
        std::cout << std::setprecision(10) << outbuf[i] << std::endl;
    }
    '
}

_domainDefinition AudioDomain {
	framework: _DesktopTemplateFramework
    parentDomain: AudioBlockDomain
	rate: AudioRate
    substitutions: [
      "num_in_chnls", _NumInputChannels,
      "num_out_chnls", _NumOutputChannels,
      "audio_buffer_size", _AudioBlockSize
    ]
    domainIncludes: []
    domainDeclarations: [ ]
    domainInitializationCode: '
//[[Initialization]]
//[[/Initialization]]
    '
	domainProcessingCode: '
    float *in = inbuf;
    float *out = outbuf;
int nBufferFrames = NUM_SAMPLES;
  while(nBufferFrames-- > 0) {

//[[Processing]]
//[[/Processing]]

    in += NUM_IN_CHANNELS;
    out += NUM_OUT_CHANNELS;
  }
    '
	domainFunctionCode: '//[[Includes]]
//[[/Includes]]'
    domainCleanupCode: ''
}



# Audio ---------------
platformBlock _HwInput {
    typeName: '_hwInput'
#	numInputs: 0
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: [""]
    processing: "in[%%bundle_index%%]"
    domain: AudioDomain
    inherits: [_Signal]
}

platformBlock _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real"]
#	numOutputs: 0
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "out[%%bundle_index%%] = %%intoken:0%%;"
    domain: AudioDomain
    inherits: [_Signal]
}

#constant _NumInputChannels {value: 2}

_hwInput AudioIn[2] {
    rate: AudioRate
    domain: AudioDomain
}

#constant _NumOutputChannels {value: 2}
_hwOutput AudioOut[2] {
    rate: AudioRate
    domain: AudioDomain
}
