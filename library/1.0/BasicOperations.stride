loop Sum {
    ports:      [
        mainInputPort InputPort {
            block:  Input
            meta:   'Bundle of signals to be added'
        }
        mainOutputPort OutputPort {
            block:  Output
            meta:   'The sum of all signals at the input'
        }
    ]
    blocks:     [
        signal Input [InputPort.size] {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
        signal Output {
            default:    0.0
            rate:       OutputPort.rate
            domain:     OutputPort.domain
            reset:      Reset
        }
        signal Index {
            default:    0
            rate:       none
            domain:     OutputPort.domain
            reset:      Reset
        }
        switch Done {
            domain:     OutputPort.domain
        }
        trigger Reset {
            #domain:     OutputPort.domain
        }
    ]
    onExecution:    Reset
    terminateWhen:  Done
    streams:    [
        Input[Index] + Output >>  Output;
        Index + 1 >> Index;
        [ Index , InputPort.size ] >>  Equal () >> Done;
    ]
    meta: 'Add all the signals at the input port'
}

module Average {
    ports:      [
        mainInputPort InputPort {
            block:  Input
            meta:   ''
        }
        mainOutputPort OutputPort {
            block:  Output
            meta:   ''
        }
    ]
    blocks:     [
        signal Input [InputPort.size] {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
        signal Output {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
        signal Sum {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
    ]
    streams:    [
        Input >> Sum() >> Sum;
        Sum / InputPort.size >> Output;
    ]
}


module Clip {
    ports:      [
        mainInputPort InputPort {
            block:  Input
            meta:   ''
        }
        mainOutputPort OutputPort {
            block:  Output
            meta:   ''
        }
        propertyInputPort MinimumPort {
            name: 'minimum'
            block:  Min
            meta:   ''
        }
        propertyInputPort MaximumPort {
            name: 'maximum'
            block:  Max
            meta:   ''
        }
    ]
    blocks:     [
        signal Input {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
        signal Output {
            rate:       OutputPort.rate
            domain:     OutputPort.domain
        }
        signal Min {
            rate:       OutputPort.rate
            default: 0.0
            domain:     OutputPort.domain
        }
        signal Max {
            rate:       OutputPort.rate
            default: 1.0
            domain:     OutputPort.domain
        }
    ]
    streams:    [
        [Input, Min] >> Less() >> Select(whenOn: Min whenOff: Input) >> Input;  
        [Input, Max] >> Greater() >> Select(whenOn: Max whenOff: Input) >> Output;  
    ]
    meta: 'Limit signal within the values of minimum and maximum'
}

