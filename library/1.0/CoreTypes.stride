type _Constraint {
	# Constraints get a special treatment in validation.
	# This type serves to mark declarations as constraints for special treatment
    typeName: "_constraint"
    properties: [
		typeProperty {
			name: "constraint"
			types: [""]
			default: none
			required: off
		}
	]
    inherits: [_Base]
}

type _ConstrainedInt {
    typeName: "constrainedInt"
    properties: [
		typeProperty {
			name: "multipleOf"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "maximum"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "exclusiveMaximum"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "minimum"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}	
		typeProperty {
			name: "exclusiveMinimum"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}
    ]
	inherits: [_Constraint]
}

type _ConstrainedString {
    typeName: "constrainedString"
    properties: [	
		typeProperty {
			name: "maxLength"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "minLength"
			types: [_IntLiteral, _NoneLiteral]
			default: none
			required: off
		}
    ]
	inherits: [_Constraint]
}

type _ConstrainedReal {
    typeName: "constrainedReal"
    properties: [
		typeProperty {
			name: "maximum"
			types: [_IntLiteral, _RealLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "exclusiveMaximum"
			types: [_IntLiteral, _RealLiteral, _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "minimum"
			types: [_IntLiteral, _RealLiteral, _NoneLiteral]
			default: none
			required: off
		}	
		typeProperty {
			name: "exclusiveMinimum"
			types: [_IntLiteral, _RealLiteral, _NoneLiteral]
			default: none
			required: off
		}
    ]
    inherits: [_Base]
}

type _ConstrainedList {
    typeName: "constrainedList"
    properties: [
		typeProperty {
			name: "maxItems"
			types: [_IntLiteral,  _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "minItems"
			types: [_IntLiteral,  _NoneLiteral]
			default: none
			required: off
		}		
		typeProperty {
			name: "uniqueItems"
			types: [_SwitchLiteral]
			default: off
			required: off
		}	
    ]
    inherits: [_Base]
}


type _TypeProperty {
	typeName: "typeProperty"
	properties: [
		typeProperty Name {
			name: "name"
			types: [_StringLiteral, ""]
			default: none
			required: on
		},
		typeProperty Direction {
			name: "direction"
			types: [_StringLiteral]
			default: "output"
			required: off
		},
		typeProperty Types {
			name: "types"
			types: [_StringLiteral, _ConstrainedInt, _ConstrainedReal,  _ConstrainedString, ""]
			default: none
			required: on
		},
		typeProperty Default {
			name: "default"
			types: [""] # TODO how to handle hybrid port types?
			default: none
			required: on
		},
		typeProperty Required {
			name: "required"
			types: [_SwitchLiteral]
			default: none
			required: on
		},
		typeProperty Public {
			name: "public"
			types: [_SwitchLiteral]
			default: off
			required: off
		}
	]
	inherits: [_Base]
}

type _Type {
	typeName: "type"
	properties: [
		typeProperty TypeName {
			name: "typeName"
			types: [_StringLiteral]
			default: none
			required: on
		},
		typeProperty Properties {
			name: "properties"
			types: [""] 
			default: none
			required: on
		}
		typeProperty Inherits {
			name: "inherits"
			types: [""]
			default: [_Base]
			required: off
		},
		typeProperty Meta {
			name: "meta"
			types: [_StringLiteral]
			default: ""
			required: off
		}
	]
	meta: "type cannot inherit from 'base' to avoid circular dependencies"
}

type _Constant {
	typeName: "constant"
	properties: [
		typeProperty Value {
			name: "value"
			types: [_StringLiteral, _IntLiteral, _RealLiteral, _SwitchLiteral, _Constant, _ResourceType, _NoneLiteral]
			default: none
			required: off
#			meta: "The constant value"
		}
	]
	meta: "Holds a constant value"
}

# TODO: Default to switch should be MasterReset
type _Switch {
	typeName: "switch"
	properties: [
		typeProperty Default {
			name: "default"
			types: [_SwitchLiteral]
			default: off
			required: off
		}
	]
	inherits: [_Streamable, _DomainMember]
}

type _Trigger {
	typeName: "trigger"
	properties: [
	]
	inherits: [_Streamable, _DomainMember]
}

type _Signal {
	typeName: "signal"
	properties: [
		typeProperty Value {
			name: "value"
			types: [_IntLiteral, _RealLiteral]
			default: 0.0
			required: off
		},
		typeProperty Default {
			name: "default"
			types: [_IntLiteral, _RealLiteral, ""]
			default: 0.0
			required: off
		},
		typeProperty Type {
			name: "type"
			types: [""]
			default: _RealType # Should be set to _DefaultTypeSignal
			required: off
		}
	]
	inherits: [_Streamable, _DomainMember]
}

type _Buffer {
	typeName: "buffer"
	properties: [
		typeProperty TypePort {
			name: "type"
			types: [_StringLiteral, ""]
			default: none
			required: off
		},
		typeProperty SizePort {
			name: "size"
			types: [_IntLiteral, ""]
			default: 0
			required: on
		},
		typeProperty RatePort {
			name: "rate"
			types: [""]
			default: none
			required: off
		},
		typeProperty DefaultPort {
			name: "default"
			types: [""]
			default: none
			required: off
		},
		typeProperty _InternalType {
			name: "_internalType"
			types: [""]
			default: _RingBufferType
			required: off
		}
	]
	inherits: [_DomainMember, _Resetable]
}


type _Table {
	typeName: "table"
	properties: [
		typeProperty SizePort {
			name: "size"
			types: [_IntLiteral]
			default: 512
			required: on
		},
		typeProperty RatePort {
			name: "rate"
			types: [_IntLiteral]
			default: none
			required: off
		},
		typeProperty TypePort {
			name: "type"
			types: [_StringLiteral, ""]
			default: none
			required: off
		},
		typeProperty _InternalType {
			name: "_internalType"
			types: [""]
			default: _TableType
			required: off
		}
	]
	inherits: [_DomainMember, _Resetable]
}

type _StringType {
	typeName: "string"
	properties: [
		typeProperty Default {
			name: "default"
			types: [_StringLiteral, ""]
			default: ""
			required: off
			meta: "Initial and default value"
		}
		typeProperty MaxSize {
			name: "maxSize"
			types: [""]
			default: none
			required: off
			meta: "Maximum size of the string"
		}
		typeProperty PreAllocate {
			name: "preallocate"
			types: [_IntLiteral]
			default: 0
			required: off
			meta: "Preallocate to size"
		}
	]
	meta: "Strings with variable length."

	inherits: [_DomainMember, _Resetable]
}

type _StreamType {
	typeName: "_stream"
	properties: [
#		typeProperty Value {
#			name: "value"
#			types: [""]
#			default: none
#			required: off
#		}
	]
}

type _IteratorType {
	typeName: "iterator"
	properties: [
		typeProperty Default {
			name: "default"
			types: [_IntLiteral, ""]
			default: 0
			required: off
			meta: "Starting value for iterator"
		},
		typeProperty Increment {
			name: "increment"
			types: [_IntLiteral]
			default: 1
			required: off
		},
		typeProperty Limit {
			name: "limit"
			types: [_IntLiteral, ""]
			default: none
			required: on
			meta: "stop before reaching this value"
		},
		typeProperty Rate {
			name: "rate"
			types: [_IntLiteral]
			default: none
			required: off
			meta: "Not supported yet, but could be of use in the future"
		},
		typeProperty Domain {
			name: "domain"
			types: [""]
			default: none
			required: off
			meta: "Not supported yet, but could be of use in the future"
		},
		typeProperty Reset {
			name: "reset"
			types: [""]
			default: none
			required: off
			meta: "This trigger will reset this iterator when triggered"
		}
		typeProperty Done {
			name: "done"
			types: [""]
			default: none
			required: off
			meta: "This trigger will be triggered when the iterator finishes a whole run"
		}
	]
	inherits: [_Base]
}

type _GroupType {
	typeName: "group"
	properties: [
		typeProperty Members {
			name: "members"
			types: [""]
			default: none
			required: on
			meta: "Members of the group"
		}
	]
	meta: "Groups signals for block processing. Guarantees that all signals are processed together."
}

