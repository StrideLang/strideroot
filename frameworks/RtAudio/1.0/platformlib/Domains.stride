# RtAudio Library

resource _RtAudioLibrary {
  includes: ["RtAudio.h"]
  meta: "RtAudio Library"
}

_compileOption _RtAudioLinuxAlsa {
  name: "Alsa"
  defines: ["__LINUX_ALSA__"]
  linkLibraries: ["asound", "pthread"]
}

_compileOption _RtAudioLinuxJack {
  name: "Jack"
  defines: ["__UNIX_JACK__"]
  linkLibraries: ["jack", "pthread"]
}

_compileOptionsGroup _RtAudioLinuxOptions {
  name: "RtAudio API"
  options: [_RtAudioLinuxPulse, _RtAudioLinuxAlsa, _RtAudioLinuxJack]
  rules: "multiple"
}

# Audio Device
resourceConfiguration _AudioDeviceIndex {
	name: "Audio Device"
	default: 0
    type: _IntLiteral
	meta: "Audio Device Index"
}

resourceConfiguration _AudioDeviceRate {
    name: "Audio Device Rate"
	possibleValues: [44100, 48000, 96000]
	default: 44100
    type: _IntLiteral
	meta: "Sound card sampling rate"
}

resourceConfiguration _AudioBufferSize {
    name: "Audio buffer size"
	possibleValues: [32, 64, 128, 256, 512, 1024, 2048, 4096]
	default: 256
    type: _IntLiteral
	meta: "Audio buffer size"
}

resourceConfiguration _AudioNumInputChannels {
    name: "Audio Input Channels"
	default: 2
    minimum: 0
    maximum: 64
    type: _IntLiteral
	meta: "Number of input audio channels"
}

resourceConfiguration _AudioNumOutputChannels {
    name: "Audio Output Channels"
	default: 2
    minimum: 0
    maximum: 64
    type: _IntLiteral
	meta: "Number of output audio channels"
}

resource _AudioDevice {
    name: "Audio Device"
	dependsOn: [_MainFunction, _RtAudioLibrary]
	exclusive: off
    configuration: [_AudioDeviceIndex, _AudioDeviceRate, _AudioBufferSize, 
                    _AudioNumInputChannels, _AudioNumOutputChannels]
	meta: 'AudioDevice'
}

constant AudioRate {
    value: _AudioDeviceRate
}

constant AudioBlockRate {
	value: _AudioDeviceRate/_AudioBufferSize
}

_domainDefinition AudioBlockDomain {
	framework: _RtAudioFramework
	parentDomain: RootDomain
	rate: AudioBlockRate
    requiresResources: [_AudioDevice]
    substitutions: [
    ]
    domainIncludes: ["RtAudio.h"]
    domainDeclarations: ['constexpr int NUM_IN_CHANNELS = %%_AudioNumInputChannels%%;',
    'constexpr int NUM_OUT_CHANNELS = %%_AudioNumOutputChannels%%;',
    'typedef float MY_TYPE;',
    '#define FORMAT RTAUDIO_FLOAT32'
    ]
    domainDeclarationsCode: ''
    domainInitializationCode: '
    RtAudio adac;
    if ( adac.getDeviceCount() < 1 ) {
        std::cout << std::endl << "No audio devices found!" << std::endl;
        exit( -1 );
    }
    // Set the same number of channels for both input and output.
    unsigned int bufferBytes;
    unsigned int bufferFrames = %%_AudioBufferSize%%;
    int iDevice = 0;
    int oDevice = 0;
    unsigned int fs = %%_AudioDeviceRate%%;


    RtAudio::StreamOptions options;
    //options.flags |= RTAUDIO_NONINTERLEAVED;

    RtAudio::StreamParameters iParams, oParams;
    iParams.deviceId = %%_AudioDeviceIndex%%;
    iParams.nChannels = %%_AudioNumInputChannels%%;
    oParams.deviceId = %%_AudioDeviceIndex%%;
    oParams.nChannels = %%_AudioNumOutputChannels%%;

    bufferBytes = bufferFrames * NUM_OUT_CHANNELS * sizeof( MY_TYPE );

    if ( iDevice == 0 )
      iParams.deviceId = adac.getDefaultInputDevice();
    if ( oDevice == 0 )
        oParams.deviceId = adac.getDefaultOutputDevice();
    try {
        adac.openStream( &oParams, &iParams, FORMAT, fs, &bufferFrames, &audio_buffer_process, (void *)&bufferBytes, &options);
    }
    catch ( RtAudioError& e ) {
        e.printMessage();
        exit( -1 );
    }
    RtAudio::DeviceInfo info = adac.getDeviceInfo(%%_AudioDeviceIndex%%);
    std::cout << "Device = " << %%_AudioDeviceIndex%% << std::endl;
    std::cout << "Name = " << info.name << std::endl;
    std::cout << ": maximum output channels = " << info.outputChannels << std::endl;
//[[Initialization]]
//[[/Initialization]]
    try {
      adac.startStream();
    }
    catch ( RtAudioError& e ) {
      e.printMessage();
      if ( adac.isStreamOpen() ) adac.closeStream();
      exit (-1);
    }
    '
domainFunctionCode: '
	//[[Includes]]
	//[[/Includes]]
	//[[Declarations]]
	//[[/Declarations]]
	int audio_buffer_process( void *outputBuffer, void *inputBuffer, unsigned int nBufferFrames,
           double streamTime, RtAudioStreamStatus status, void *data )
{
//[[Processing]]
//[[/Processing]]
  return 0;
}
'
    domainCleanupCode: '
    // Stop the stream.
    try {
        if ( adac.isStreamRunning() ) adac.stopStream();
        if ( adac.isStreamOpen() ) adac.closeStream();
    }
    catch ( RtAudioError& e ) {
      e.printMessage();
    }
//[[/Cleanup]]
//[[/Cleanup]]
    '
}


_domainDefinition AudioDomain {
	framework: _RtAudioFramework
	parentDomain: AudioBlockDomain
	rate: AudioRate
    substitutions: []
    domainDeclarationsCode: ''
    domainFunctionCode: '
	//[[Includes]]
	//[[/Includes]]
	//[[Declarations]]
	//[[/Declarations]]
    '
	domainProcessingCode: '
  if ( status ) std::cout << "Stream over/underflow detected." << std::endl;
  //unsigned long *bytes = (unsigned long *) data;
  MY_TYPE *in = (MY_TYPE *)inputBuffer;
  MY_TYPE *out = (MY_TYPE *)outputBuffer;
  while(nBufferFrames-- > 0) {
//[[Processing]]
//[[/Processing]]
			in += NUM_IN_CHANNELS;
			out += NUM_OUT_CHANNELS;
  }
'
#    domainIncludes: []
#    domainDeclarations: []
    domainInitializationCode: '
//[[Initialization]]
//[[/Initialization]]
	'
    domainCleanupCode: '//[[Cleanup]]
//[[/Cleanup]]'
}


# Audio ---------------
platformBlock _HwInput {
    typeName: '_hwInput'
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: [""]
    processing: "in[%%bundle_index%%]"
    domain: AudioDomain
	rate: AudioRate
    inherits: [_Signal]
}

platformBlock _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real"]
#	numOutputs: 0
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "out[%%bundle_index%%] = %%intoken:0%%;"
    domain: AudioDomain
	rate: AudioRate
    inherits: [_Signal]
}

#constant _NumInputChannels {value: 2}

_hwInput AudioIn[_AudioNumInputChannels] {
    rate: _AudioDeviceRate
    domain: AudioDomain
}

#constant _NumOutputChannels {value: 2}

_hwOutput AudioOut[_AudioNumOutputChannels] {
    rate: _AudioDeviceRate
    domain: AudioDomain
}
