# Serial Resources

resourceConfiguration _SerialPortDevice {
	name: "Serial Port"
	default: '/dev/ttyACM0'
  type: _StringLiteral
	override: [["RtAudio", _SerialPort]]
	meta: "Serial port selection"
}

resourceConfiguration _SerialPortBaudRate {
  name: "Baud Rate"
	possibleValues: [9600, 14400, 19200, 38400, 56000, 57600, 115200, 128000]
	default: 57600
  type: _IntLiteral
	meta: "Serial Baud Rate"
}

resource SerialLibrary {
  includes: ['serial/serial.h']
  meta: "Serial library"
}

resource SerialPort {
  configuration: [_SerialPortDevice, _SerialPortBaudRate]
#  maxInstances: 1
  declarations: [
  'serial::Serial serialPort;'
  ]
	meta: 'Hardware Serial Port'
}

# Serial configuration constants

#constant _SerialBaudRate  { # Overriden by configuration
#	value: 9600
#}

#constant _SerialPort  { # Overriden by configuration
#	value: '"/dev/ttyACM0"'
#}

resource SerialThread {
  configuration: [SerialProcessRate]
#  maxInstances: 1
  declarations: [
  ]
	meta: 'Serial message thread'
}

resourceConfiguration SerialProcessRate {
  name: "Serial Process Rate"
	default: 1000
  type: _IntLiteral
	meta: "Serial Process Rate"
}
 
# Serial domains

_domainDefinition SerialDomain {
	framework: _RtAudioFramework
	parentDomain: RootDomain
	rate: SerialProcessRate
	requiresResources: [SerialPort, SerialLibrary, SerialThread]
  substitutions: [
      "SerialProcessRate", SerialProcessRate,
      "_SerialPortDevice", _SerialPortDevice,
      "_SerialPortBaudRate", _SerialPortBaudRate
    ]
    domainIncludes: ["<thread>"]
    domainDeclarations: ["void serial_thread_func();",
		"bool serialthread_running {true};",
		"std::thread serialReadThread(serial_thread_func);"]
    domainInitializationCode: ""
    	domainProcessingCode: ''
	domainFunctionCode: '
void serial_thread_func() {

	  try {
      serialPort.setPort("%%_SerialPortDevice%%");
      serialPort.setBaudrate(%%_SerialPortBaudRate%%);
      auto timeout = serial::Timeout::simpleTimeout(1.0/%%SerialProcessRate%%);
      serialPort.setTimeout(timeout);
 
    std::cerr << "after set " << std::endl;
		  serialPort.open();
		  } catch (const serial::IOException &/*e*/) {
      serialthread_running = false;
		  std::cerr << "Error opening serial port: %%_SerialPortDevice%%"  << std::endl;

    }
	  
	  if(!serialPort.isOpen()) {
		  serialthread_running = false; 
	  }
		std::string lineBuffer;
		int mGranularity = 1000000.0/%%SerialProcessRate%%; // nanoseconds
//[[Declarations]]
//[[/Declarations]]
//[[Initialization]]
//[[/Initialization]]
  // Flush buffers
  //my_serial.flush();
  const unsigned int bufferSize = 4096;
  uint8_t buffer[bufferSize];
  while (serialthread_running) {
    //std::cerr << "loop" << std::endl;
    auto nextTime = std::chrono::high_resolution_clock::now() + std::chrono::nanoseconds(mGranularity);
//[[Processing]]
//[[/Processing]]
  }
}
	'
    domainCleanupCode: '
	serialthread_running = false;
	serialReadThread.join();
	std::cout << "Serial Thread joined." << std::endl;
	'
}


_domainDefinition SerialOutDomain {
	framework: _RtAudioFramework
	parentDomain: SerialDomain
	rate: 0
  domainInitializationCode: ''
	domainFunctionCode: ''
	domainProcessingCode: '//[[Processing]]
//[[/Processing]]

'
    domainCleanupCode: ''
}

_domainDefinition SerialInDomain {
	framework: _RtAudioFramework
	parentDomain: SerialDomain
	rate: 0
  domainInitializationCode: 'for (size_t i = 0; i < %%in_channels%%; i++) { 
	  __serialInVar[i] = 0;
  }
  '
  domainDeclarations: ['float __serialInVar[%%in_channels%%];']
  substitutions: ["in_channels", _NumSerialInChannels]
	domainFunctionCode: ''
	domainProcessingCode: "    try {
      size_t count = serialPort.read(buffer, bufferSize);
	  // If data, parse it into __serialInVar
	if (count > 0) {
    size_t start = 0;
    size_t nullPos = 0;
    while(nullPos <= count) {
      if (buffer[nullPos] == '\n' || buffer[nullPos] == '\r') {
        buffer[nullPos] = '\0';
        char *thisLine = (char *) buffer + start;
        lineBuffer += std::string(thisLine);
        if (lineBuffer.size() > 0) {
          // Process line
			auto separatorIndex = lineBuffer.find(':');
      		size_t _id = std::stoi(lineBuffer.substr(0, separatorIndex));
			  if (_id < %%in_channels%%) {
				  std::string _value = lineBuffer.substr(separatorIndex + 1);
      		      __serialInVar[_id] = std::stof(_value);	
			  }
          	lineBuffer.clear();
        }
        start = nullPos + 1;
      }
      nullPos++;
    }
    if (start < count) {
      char *thisLine = (char *) buffer + start;
      buffer[count] = '\0';
      lineBuffer += std::string(thisLine);
    }
  }			
//[[Processing]]
//[[/Processing]]
      std::this_thread::sleep_until(nextTime);
    } catch (const serial::PortNotOpenedException &/*e*/) {
      serialthread_running = false;

    } catch (const serial::IOException &/*e*/) {
      serialthread_running = false;

    }"
    domainCleanupCode: '// Cleanup SerialInDomain'
}

_domainDefinition SerialChannelDomain {
	framework: _RtAudioFramework
	parentDomain: SerialDomain
	maxInstances: none
	rate: 0
    domainInitializationCode: ''
	domainFunctionCode: ''
	domainProcessingCode: '//[[Processing]]
//[[/Processing]]'
    domainCleanupCode: ''
}


# Serial platform blocks ------------------------


platformBlock _SerialOutput {
    typeName: '_serialOutput'
#	numInputs: 0
	inputs: ["real"]
    include: ['<string>']
#    linkTo: []
   declarations: ['std::string __serialVar;']
#    initializations: [""]
    processing: '
	__serialVar =  "%%bundle_index%%:" + std::to_string(%%intoken:0%%) + "\n";
    size_t bytes_wrote = serialPort.write((const uint8_t*)__serialVar.data(), __serialVar.size());
	'
    domain: SerialOutDomain
	rate: SerialProcessRate
    inherits: [_Signal]
}


platformBlock _SerialInput {
    typeName: '_serialInput'
#	numInputs: 0
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: [""]
    processing: "__serialInVar[%%bundle_index%%]"
    domain: SerialInDomain
	rate: SerialProcessRate
    inherits: [_Signal]
}

platformBlock _SerialPrintType {
    typeName: '_serialPrintType'
	inputs: ["string", "string"]
#	outputs: 0
#   include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
#    linkTo: ["serial"]
#    declarations: ['']
    initializations: ["// Not implemented"]
    processing: "serialPort.write(%%intoken:0%%);
"
    inherits: [_Signal]
}

constant _NumSerialInChannels {value: 2}

_serialInput SerialIn[_NumSerialInChannels] {
    rate: SerialProcessRate
    domain: SerialInDomain
}

constant _NumSerialOutChannels {value: 2}

_serialOutput SerialOut[_NumSerialOutChannels] {
    rate: SerialProcessRate
    domain: SerialOutDomain
}
